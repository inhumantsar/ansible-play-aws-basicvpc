---
- name: Build out a VPC in AWS
  hosts: all
  connection: local
  gather_facts: False

  tasks:
    - name: "Ensure pip is installed."
      easy_install: name=pip
    - name: "Ensure boto is installed."
      pip: name=boto

    - name: "Create the vpc if it doesn't already exist."
      local_action:
        module: ec2_vpc_net
        name: "{{ vpc_name }}_{{ service_env }}"
        cidr_block: "{{ vpc_cidr }}"
        region: "{{ vpc_region }}"
        state: "{{ service_state }}"
      register: vpc

    - name: "Confirm vpc created with correct cidr"
      assert:
        that:
          - "vpc.vpc.cidr_block == vpc_cidr"
        msg: "Unexpected cidr block assigned to VPC."

    - name: "Create public subnets"
      local_action:
        module: ec2_vpc_subnet
        state: "{{ service_state }}"
        vpc_id: "{{ vpc.vpc.id }}"
        region: "{{ vpc_region }}"
        cidr: "{{ item }}"
        az: "{{ vpc_region }}{{ vpc_public_subnet_azs[item] }}"
        tags:
          vpc: "{{ vpc_name }}_{{ service_env }}"
      with_items:
        - "{{ vpc_public_subnet_cidrs }}"
      register: public_subnets

    # it's hard to get fancy with dicts in ansible the way one might in python
    - name: "Confirm the right number of subnets were created"
      assert:
        that:
          - "public_subnets.results|length == vpc_public_subnet_cidrs|length"

    - name: "Create internet gateway for public subnets"
      local_action:
        module: ec2_vpc_igw
        state: "{{ service_state }}"
        vpc_id: "{{ vpc.vpc.id }}"
        region: "{{ vpc_region }}"
      register: igw

    - name: "Confirm we got a valid gateway id"
      assert:
        that:
          - "igw.gateway_id != ''"
        msg: "Empty or non-existant internet gateway id. did the create fail silently?"

    - name: "Create route table for public subnets"
      local_action:
        module: ec2_vpc_route_table
        state: "{{ service_state }}"
        vpc_id: "{{ vpc.vpc.id }}"
        region: "{{ vpc_region }}"
        subnets: "{{ vpc_public_subnet_cidrs }}"
        tags:
          vpc: "{{ vpc_name }}_{{ service_env }}"
        routes:
          - dest: 0.0.0.0/0
            gateway_id: "{{ igw.gateway_id }}"
      register: rtb

    - name: "Confirm route table settings"
      assert:
        that:
          - "rtb.route_table.routes[1].destination_cidr_block == '0.0.0.0/0'"
          - "rtb.route_table.routes[1].gateway_id == igw.gateway_id"
          - "rtb.route_table.vpc_id == vpc.vpc.id"
